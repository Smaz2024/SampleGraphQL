# --- Production Profile (Activated when spring.profiles.active=prod) ---
# This file contains settings specifically for a live production environment.
# It prioritizes security, performance, and stability over developer convenience.


spring:
    config:
      activate:
        # Explicitly declares that this configuration belongs to the 'prod' profile.
        on-profile: prod
  # All datasource properties must be provided by environment variables in production.
  # This is a critical security practice to avoid hardcoding secrets in the codebase.
  datasource:
    url: ${DB_URL}
    driver-class-name: ${DB_DRIVER}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      # 'validate' is the recommended setting for production. It checks that the database schema
      # matches the application's entity definitions at startup. If there's a mismatch, the application
      # will fail to start, preventing potential data corruption. It never alters the database.
      # Database schema changes should be managed explicitly with a migration tool like Flyway or Liquibase.
      ddl-auto: validate
    # SQL logging is disabled in production to avoid performance overhead and to prevent
    # sensitive data from being exposed in logs.
    show-sql: false
    properties:
      hibernate:
        # The SQL dialect must be provided via an environment variable to match the production database (e.g., PostgreSQL, MySQL).
        dialect: ${DB_DIALECT}
  # Ensure developer consoles are disabled in production for security.
  h2:
    console:
      enabled: false
  # Redis connection details must be provided via environment variables.
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}
    password: ${REDIS_PASSWORD}
  # Disable the GraphiQL UI in production. Exposing this tool is a security risk.
  graphql:
    graphiql:
      enabled: false

# All JWT secrets and expirations must be provided via environment variables.
jwt:
  # The JWT_SECRET must be a long, random, and cryptographically strong string.
  secret: ${JWT_SECRET}
  # A short expiration time for access tokens (e.g., 15 minutes) is a security best practice.
  # It limits the time an attacker can use a compromised token.
  expiration: ${JWT_EXPIRATION:900000} # Defaults to 15 minutes
  # Refresh tokens have a longer lifespan (e.g., 7 days) to allow users to stay logged in.
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # Defaults to 7 days

# A strict Cross-Origin Resource Sharing (CORS) policy is essential for production security.
security:
  cors:
    # The list of allowed origins must be explicitly defined and should not use wildcards.
    # This should be the domain of your frontend application.
    allowed-origins: ${CORS_ORIGINS} # e.g., "https://yourapp.com,https://www.yourapp.com"
    # Only allow the HTTP methods required by the application.
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    # Only allow the specific headers required for authentication and content negotiation.
    allowed-headers: "Authorization,Content-Type"
    # Allows credentials (like cookies or auth headers) to be sent.
    allow-credentials: true
  # A custom flag to enforce HTTPS, which is critical for protecting data in transit.
  # This is often used in conjunction with a reverse proxy that terminates SSL.
  require-ssl: true

# Set default log levels for production to reduce log volume and focus on important events.
logging:
  level:
    # The application's log level is set to INFO by default, but can be overridden for debugging.
    com.example: ${LOG_LEVEL:INFO}
    # Framework logs are set to WARN to only capture significant issues.
    org.springframework.security: WARN
    org.springframework.graphql: WARN